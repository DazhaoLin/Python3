class Super:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return "My name is " + self.name + "."

class Sub(Super):
    def __init__(self, name):
        Super.__init__(self, name)


obj = Sub("Andy")

print(obj)

###################### Output ####################
My name is Andy.
##################################################


###################### Notes ######################
 As there is no __str__() method within the Sub class, 
 the printed string is to be produced within the Super class. 
 This means that the __str__() method has been inherited by the Sub class.
 
 有趣，即使没调用__str__也用了
 
 
 
 
 #################### Another example ###################################
 class Super:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return "My name is " + self.name + "."

class Sub(Super):
    def __init__(self, name):
        super().__init__(name)


obj = Sub("Andy")

print(obj)

##########################################################################

############################# Output #####################################
My name is Andy.

###########################################################################


############################# Notes ######################################
第二个例子删了self这个变量，只剩name也行
In the last example, we explicitly named the superclass. 
In this example, we make use of the super() function, which accesses the superclass without needing to know its name:

super().__init__(name)

The super() function creates a context in which you don't have to (moreover, you mustn't) pass the self argument to the method being invoked 
- this is why it's possible to activate the superclass constructor using only one argument.

you can use this mechanism not only to invoke the superclass constructor, 
but also to get access to any of the resources available inside the superclass.
