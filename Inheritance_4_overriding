class Level1:
    var = 100
    def fun(self):
        return 101

class Level2(Level1):
    var = 200
    def fun(self):
        return 201

class Level3(Level2):
    pass

obj = Level3()

print(obj.var, obj.fun())

################### Output #####################
200 201
################################################


##################### Notes #######################
As you can see, the var class variable and fun() method from the Level2 class override the entities of the same names derived from the Level1 class.

This feature can be intentionally used to modify default (or previously defined) class behaviors when any of its classes needs to act in a different way to its ancestor.

We can also say that Python looks for an entity from bottom to top, and is fully satisfied with the first entity of the desired name.
先下后⬆️，找到停止



###################### exmaple 2 ################################
class Left:
    var = "L"
    varLeft = "LL"
    def fun(self):
        return "Left"


class Right:
    var = "R"
    varRight = "RR"
    def fun(self):
        return "Right"

class Sub(Left, Right):
    pass


obj = Sub()

print(obj.var, obj.varLeft, obj.varRight, obj.fun())

########################## Output ##################################
L LL RR Left
####################################################################

########################### Notes ###################################
We can say that Python looks for object components in the following order:

inside the object itself;
in its superclasses, from bottom to top;
if there is more than one class on a particular inheritance path, Python scans them from left to right.
先左再右，找到就停止
#####################################################################

